{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Tsunade\\\\Tsunade\\\\frontend\\\\src\\\\contexts\\\\HealthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport apiService, { healthAPI, calendarAPI, prescriptionAPI } from '../services/apiService';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  prescriptions: [],\n  healthProfile: null,\n  recommendations: [],\n  calendarEvents: [],\n  currentPrescription: null,\n  loading: {\n    profile: false,\n    prescriptions: false,\n    recommendations: false,\n    calendar: false\n  },\n  errors: {\n    profile: null,\n    prescriptions: null,\n    recommendations: null,\n    calendar: null\n  }\n};\n\n// Action types\nconst ActionTypes = {\n  SET_USER: 'SET_USER',\n  SET_AUTHENTICATED: 'SET_AUTHENTICATED',\n  ADD_PRESCRIPTION: 'ADD_PRESCRIPTION',\n  SET_HEALTH_PROFILE: 'SET_HEALTH_PROFILE',\n  SET_RECOMMENDATIONS: 'SET_RECOMMENDATIONS',\n  ADD_CALENDAR_EVENT: 'ADD_CALENDAR_EVENT',\n  SET_CALENDAR_EVENTS: 'SET_CALENDAR_EVENTS',\n  SET_CURRENT_PRESCRIPTION: 'SET_CURRENT_PRESCRIPTION',\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  RESET_STATE: 'RESET_STATE'\n};\n\n// Reducer\nconst healthReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case ActionTypes.SET_AUTHENTICATED:\n      return {\n        ...state,\n        isAuthenticated: action.payload\n      };\n    case ActionTypes.ADD_PRESCRIPTION:\n      return {\n        ...state,\n        prescriptions: [action.payload, ...state.prescriptions.slice(0, 9)],\n        // Keep last 10\n        currentPrescription: action.payload\n      };\n    case ActionTypes.SET_HEALTH_PROFILE:\n      return {\n        ...state,\n        healthProfile: action.payload\n      };\n    case ActionTypes.SET_RECOMMENDATIONS:\n      return {\n        ...state,\n        recommendations: action.payload\n      };\n    case ActionTypes.ADD_CALENDAR_EVENT:\n      return {\n        ...state,\n        calendarEvents: [action.payload, ...state.calendarEvents]\n      };\n    case ActionTypes.SET_CALENDAR_EVENTS:\n      return {\n        ...state,\n        calendarEvents: action.payload\n      };\n    case ActionTypes.SET_CURRENT_PRESCRIPTION:\n      return {\n        ...state,\n        currentPrescription: action.payload\n      };\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: {\n          ...state.loading,\n          [action.payload.key]: action.payload.value\n        }\n      };\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        errors: {\n          ...state.errors,\n          [action.payload.key]: action.payload.value\n        }\n      };\n    case ActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        errors: {\n          ...state.errors,\n          [action.payload]: null\n        }\n      };\n    case ActionTypes.RESET_STATE:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\n// Context\nconst HealthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const HealthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(healthReducer, initialState);\n\n  // Helper functions\n  const setLoading = (key, value) => {\n    dispatch({\n      type: ActionTypes.SET_LOADING,\n      payload: {\n        key,\n        value\n      }\n    });\n  };\n  const setError = (key, value) => {\n    dispatch({\n      type: ActionTypes.SET_ERROR,\n      payload: {\n        key,\n        value\n      }\n    });\n  };\n  const clearError = key => {\n    dispatch({\n      type: ActionTypes.CLEAR_ERROR,\n      payload: key\n    });\n  };\n\n  // API functions\n  const fetchHealthProfile = async () => {\n    setLoading('profile', true);\n    clearError('profile');\n    try {\n      const data = await healthAPI.getProfile();\n      dispatch({\n        type: ActionTypes.SET_HEALTH_PROFILE,\n        payload: data\n      });\n    } catch (error) {\n      setError('profile', error.message);\n    } finally {\n      setLoading('profile', false);\n    }\n  };\n  const fetchRecommendations = async () => {\n    setLoading('recommendations', true);\n    clearError('recommendations');\n    try {\n      const data = await healthAPI.getRecommendations();\n      dispatch({\n        type: ActionTypes.SET_RECOMMENDATIONS,\n        payload: data.recommendations || []\n      });\n    } catch (error) {\n      setError('recommendations', error.message);\n    } finally {\n      setLoading('recommendations', false);\n    }\n  };\n  const fetchCalendarEvents = async () => {\n    setLoading('calendar', true);\n    clearError('calendar');\n    try {\n      const data = await calendarAPI.getEvents();\n      dispatch({\n        type: ActionTypes.SET_CALENDAR_EVENTS,\n        payload: data\n      });\n    } catch (error) {\n      setError('calendar', error.message);\n    } finally {\n      setLoading('calendar', false);\n    }\n  };\n  const processPrescription = async prescriptionData => {\n    var _prescriptionData$ext;\n    // Add prescription to state\n    dispatch({\n      type: ActionTypes.ADD_PRESCRIPTION,\n      payload: prescriptionData\n    });\n\n    // Automatically refresh related data\n    await Promise.all([fetchHealthProfile(), fetchRecommendations()]);\n\n    // Create calendar events for medications\n    if ((_prescriptionData$ext = prescriptionData.extracted_info) !== null && _prescriptionData$ext !== void 0 && _prescriptionData$ext.medications) {\n      for (const medication of prescriptionData.extracted_info.medications) {\n        await createMedicationReminder(medication);\n      }\n    }\n  };\n  const createMedicationReminder = async medication => {\n    try {\n      var _medication$frequency;\n      const eventData = await calendarAPI.createEvent({\n        title: `Take ${medication.name}`,\n        description: `Medication reminder: ${medication.name} - ${medication.dosage}\\nFrequency: ${medication.frequency}`,\n        start_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        duration_minutes: 15,\n        recurrence: (_medication$frequency = medication.frequency) !== null && _medication$frequency !== void 0 && _medication$frequency.toLowerCase().includes('daily') ? 'daily' : null\n      });\n      dispatch({\n        type: ActionTypes.ADD_CALENDAR_EVENT,\n        payload: eventData\n      });\n    } catch (error) {\n      console.error('Error creating medication reminder:', error);\n    }\n  };\n  const login = userData => {\n    dispatch({\n      type: ActionTypes.SET_USER,\n      payload: userData\n    });\n    dispatch({\n      type: ActionTypes.SET_AUTHENTICATED,\n      payload: true\n    });\n\n    // Update API service token\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      apiService.setToken(token);\n    }\n\n    // Fetch initial data\n    fetchHealthProfile();\n    fetchRecommendations();\n    fetchCalendarEvents();\n  };\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user_profile');\n    apiService.clearToken();\n    dispatch({\n      type: ActionTypes.RESET_STATE\n    });\n  };\n\n  // Initialize data on authentication\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    const userProfile = localStorage.getItem('user_profile');\n    if (token && userProfile) {\n      try {\n        const user = JSON.parse(userProfile);\n        apiService.setToken(token);\n        dispatch({\n          type: ActionTypes.SET_USER,\n          payload: user\n        });\n        dispatch({\n          type: ActionTypes.SET_AUTHENTICATED,\n          payload: true\n        });\n\n        // Fetch initial data\n        fetchHealthProfile();\n        fetchRecommendations();\n        fetchCalendarEvents();\n      } catch (error) {\n        console.error('Error parsing user profile:', error);\n        logout();\n      }\n    }\n  }, []);\n  const value = {\n    // State\n    ...state,\n    // Actions\n    login,\n    logout,\n    processPrescription,\n    fetchHealthProfile,\n    fetchRecommendations,\n    fetchCalendarEvents,\n    createMedicationReminder,\n    setLoading,\n    setError,\n    clearError,\n    // Dispatch for custom actions\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(HealthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook to use the context\n_s(HealthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = HealthProvider;\nexport const useHealth = () => {\n  _s2();\n  const context = useContext(HealthContext);\n  if (!context) {\n    throw new Error('useHealth must be used within a HealthProvider');\n  }\n  return context;\n};\n_s2(useHealth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default HealthContext;\nvar _c;\n$RefreshReg$(_c, \"HealthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","apiService","healthAPI","calendarAPI","prescriptionAPI","jsxDEV","_jsxDEV","initialState","user","isAuthenticated","prescriptions","healthProfile","recommendations","calendarEvents","currentPrescription","loading","profile","calendar","errors","ActionTypes","SET_USER","SET_AUTHENTICATED","ADD_PRESCRIPTION","SET_HEALTH_PROFILE","SET_RECOMMENDATIONS","ADD_CALENDAR_EVENT","SET_CALENDAR_EVENTS","SET_CURRENT_PRESCRIPTION","SET_LOADING","SET_ERROR","CLEAR_ERROR","RESET_STATE","healthReducer","state","action","type","payload","slice","key","value","HealthContext","HealthProvider","children","_s","dispatch","setLoading","setError","clearError","fetchHealthProfile","data","getProfile","error","message","fetchRecommendations","getRecommendations","fetchCalendarEvents","getEvents","processPrescription","prescriptionData","_prescriptionData$ext","Promise","all","extracted_info","medications","medication","createMedicationReminder","_medication$frequency","eventData","createEvent","title","name","description","dosage","frequency","start_time","Date","now","toISOString","duration_minutes","recurrence","toLowerCase","includes","console","login","userData","token","localStorage","getItem","setToken","logout","removeItem","clearToken","userProfile","JSON","parse","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useHealth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Admin/Downloads/Tsunade/Tsunade/frontend/src/contexts/HealthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport apiService, { healthAPI, calendarAPI, prescriptionAPI } from '../services/apiService';\n\n// Initial state\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  prescriptions: [],\n  healthProfile: null,\n  recommendations: [],\n  calendarEvents: [],\n  currentPrescription: null,\n  loading: {\n    profile: false,\n    prescriptions: false,\n    recommendations: false,\n    calendar: false\n  },\n  errors: {\n    profile: null,\n    prescriptions: null,\n    recommendations: null,\n    calendar: null\n  }\n};\n\n// Action types\nconst ActionTypes = {\n  SET_USER: 'SET_USER',\n  SET_AUTHENTICATED: 'SET_AUTHENTICATED',\n  ADD_PRESCRIPTION: 'ADD_PRESCRIPTION',\n  SET_HEALTH_PROFILE: 'SET_HEALTH_PROFILE',\n  SET_RECOMMENDATIONS: 'SET_RECOMMENDATIONS',\n  ADD_CALENDAR_EVENT: 'ADD_CALENDAR_EVENT',\n  SET_CALENDAR_EVENTS: 'SET_CALENDAR_EVENTS',\n  SET_CURRENT_PRESCRIPTION: 'SET_CURRENT_PRESCRIPTION',\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  RESET_STATE: 'RESET_STATE'\n};\n\n// Reducer\nconst healthReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_USER:\n      return { ...state, user: action.payload };\n    \n    case ActionTypes.SET_AUTHENTICATED:\n      return { ...state, isAuthenticated: action.payload };\n    \n    case ActionTypes.ADD_PRESCRIPTION:\n      return {\n        ...state,\n        prescriptions: [action.payload, ...state.prescriptions.slice(0, 9)], // Keep last 10\n        currentPrescription: action.payload\n      };\n    \n    case ActionTypes.SET_HEALTH_PROFILE:\n      return { ...state, healthProfile: action.payload };\n    \n    case ActionTypes.SET_RECOMMENDATIONS:\n      return { ...state, recommendations: action.payload };\n    \n    case ActionTypes.ADD_CALENDAR_EVENT:\n      return {\n        ...state,\n        calendarEvents: [action.payload, ...state.calendarEvents]\n      };\n    \n    case ActionTypes.SET_CALENDAR_EVENTS:\n      return { ...state, calendarEvents: action.payload };\n    \n    case ActionTypes.SET_CURRENT_PRESCRIPTION:\n      return { ...state, currentPrescription: action.payload };\n    \n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: { ...state.loading, [action.payload.key]: action.payload.value }\n      };\n    \n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        errors: { ...state.errors, [action.payload.key]: action.payload.value }\n      };\n    \n    case ActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        errors: { ...state.errors, [action.payload]: null }\n      };\n    \n    case ActionTypes.RESET_STATE:\n      return initialState;\n    \n    default:\n      return state;\n  }\n};\n\n// Context\nconst HealthContext = createContext();\n\n// Provider component\nexport const HealthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(healthReducer, initialState);\n\n  // Helper functions\n  const setLoading = (key, value) => {\n    dispatch({ type: ActionTypes.SET_LOADING, payload: { key, value } });\n  };\n\n  const setError = (key, value) => {\n    dispatch({ type: ActionTypes.SET_ERROR, payload: { key, value } });\n  };\n\n  const clearError = (key) => {\n    dispatch({ type: ActionTypes.CLEAR_ERROR, payload: key });\n  };\n\n  // API functions\n  const fetchHealthProfile = async () => {\n    setLoading('profile', true);\n    clearError('profile');\n    \n    try {\n      const data = await healthAPI.getProfile();\n      dispatch({ type: ActionTypes.SET_HEALTH_PROFILE, payload: data });\n    } catch (error) {\n      setError('profile', error.message);\n    } finally {\n      setLoading('profile', false);\n    }\n  };\n\n  const fetchRecommendations = async () => {\n    setLoading('recommendations', true);\n    clearError('recommendations');\n    \n    try {\n      const data = await healthAPI.getRecommendations();\n      dispatch({ type: ActionTypes.SET_RECOMMENDATIONS, payload: data.recommendations || [] });\n    } catch (error) {\n      setError('recommendations', error.message);\n    } finally {\n      setLoading('recommendations', false);\n    }\n  };\n\n  const fetchCalendarEvents = async () => {\n    setLoading('calendar', true);\n    clearError('calendar');\n    \n    try {\n      const data = await calendarAPI.getEvents();\n      dispatch({ type: ActionTypes.SET_CALENDAR_EVENTS, payload: data });\n    } catch (error) {\n      setError('calendar', error.message);\n    } finally {\n      setLoading('calendar', false);\n    }\n  };\n\n  const processPrescription = async (prescriptionData) => {\n    // Add prescription to state\n    dispatch({ type: ActionTypes.ADD_PRESCRIPTION, payload: prescriptionData });\n    \n    // Automatically refresh related data\n    await Promise.all([\n      fetchHealthProfile(),\n      fetchRecommendations()\n    ]);\n    \n    // Create calendar events for medications\n    if (prescriptionData.extracted_info?.medications) {\n      for (const medication of prescriptionData.extracted_info.medications) {\n        await createMedicationReminder(medication);\n      }\n    }\n  };\n\n  const createMedicationReminder = async (medication) => {\n    try {\n      const eventData = await calendarAPI.createEvent({\n        title: `Take ${medication.name}`,\n        description: `Medication reminder: ${medication.name} - ${medication.dosage}\\nFrequency: ${medication.frequency}`,\n        start_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        duration_minutes: 15,\n        recurrence: medication.frequency?.toLowerCase().includes('daily') ? 'daily' : null\n      });\n      \n      dispatch({ type: ActionTypes.ADD_CALENDAR_EVENT, payload: eventData });\n    } catch (error) {\n      console.error('Error creating medication reminder:', error);\n    }\n  };\n\n  const login = (userData) => {\n    dispatch({ type: ActionTypes.SET_USER, payload: userData });\n    dispatch({ type: ActionTypes.SET_AUTHENTICATED, payload: true });\n    \n    // Update API service token\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    // Fetch initial data\n    fetchHealthProfile();\n    fetchRecommendations();\n    fetchCalendarEvents();\n  };\n\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user_profile');\n    apiService.clearToken();\n    dispatch({ type: ActionTypes.RESET_STATE });\n  };\n\n  // Initialize data on authentication\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    const userProfile = localStorage.getItem('user_profile');\n    \n    if (token && userProfile) {\n      try {\n        const user = JSON.parse(userProfile);\n        apiService.setToken(token);\n        dispatch({ type: ActionTypes.SET_USER, payload: user });\n        dispatch({ type: ActionTypes.SET_AUTHENTICATED, payload: true });\n        \n        // Fetch initial data\n        fetchHealthProfile();\n        fetchRecommendations();\n        fetchCalendarEvents();\n      } catch (error) {\n        console.error('Error parsing user profile:', error);\n        logout();\n      }\n    }\n  }, []);\n\n  const value = {\n    // State\n    ...state,\n    \n    // Actions\n    login,\n    logout,\n    processPrescription,\n    fetchHealthProfile,\n    fetchRecommendations,\n    fetchCalendarEvents,\n    createMedicationReminder,\n    setLoading,\n    setError,\n    clearError,\n    \n    // Dispatch for custom actions\n    dispatch\n  };\n\n  return (\n    <HealthContext.Provider value={value}>\n      {children}\n    </HealthContext.Provider>\n  );\n};\n\n// Hook to use the context\nexport const useHealth = () => {\n  const context = useContext(HealthContext);\n  if (!context) {\n    throw new Error('useHealth must be used within a HealthProvider');\n  }\n  return context;\n};\n\nexport default HealthContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,OAAOC,UAAU,IAAIC,SAAS,EAAEC,WAAW,EAAEC,eAAe,QAAQ,wBAAwB;;AAE5F;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,eAAe,EAAE,KAAK;EACtBC,aAAa,EAAE,EAAE;EACjBC,aAAa,EAAE,IAAI;EACnBC,eAAe,EAAE,EAAE;EACnBC,cAAc,EAAE,EAAE;EAClBC,mBAAmB,EAAE,IAAI;EACzBC,OAAO,EAAE;IACPC,OAAO,EAAE,KAAK;IACdN,aAAa,EAAE,KAAK;IACpBE,eAAe,EAAE,KAAK;IACtBK,QAAQ,EAAE;EACZ,CAAC;EACDC,MAAM,EAAE;IACNF,OAAO,EAAE,IAAI;IACbN,aAAa,EAAE,IAAI;IACnBE,eAAe,EAAE,IAAI;IACrBK,QAAQ,EAAE;EACZ;AACF,CAAC;;AAED;AACA,MAAME,WAAW,GAAG;EAClBC,QAAQ,EAAE,UAAU;EACpBC,iBAAiB,EAAE,mBAAmB;EACtCC,gBAAgB,EAAE,kBAAkB;EACpCC,kBAAkB,EAAE,oBAAoB;EACxCC,mBAAmB,EAAE,qBAAqB;EAC1CC,kBAAkB,EAAE,oBAAoB;EACxCC,mBAAmB,EAAE,qBAAqB;EAC1CC,wBAAwB,EAAE,0BAA0B;EACpDC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE,aAAa;EAC1BC,WAAW,EAAE;AACf,CAAC;;AAED;AACA,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACvC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKhB,WAAW,CAACC,QAAQ;MACvB,OAAO;QAAE,GAAGa,KAAK;QAAEzB,IAAI,EAAE0B,MAAM,CAACE;MAAQ,CAAC;IAE3C,KAAKjB,WAAW,CAACE,iBAAiB;MAChC,OAAO;QAAE,GAAGY,KAAK;QAAExB,eAAe,EAAEyB,MAAM,CAACE;MAAQ,CAAC;IAEtD,KAAKjB,WAAW,CAACG,gBAAgB;MAC/B,OAAO;QACL,GAAGW,KAAK;QACRvB,aAAa,EAAE,CAACwB,MAAM,CAACE,OAAO,EAAE,GAAGH,KAAK,CAACvB,aAAa,CAAC2B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAAE;QACrEvB,mBAAmB,EAAEoB,MAAM,CAACE;MAC9B,CAAC;IAEH,KAAKjB,WAAW,CAACI,kBAAkB;MACjC,OAAO;QAAE,GAAGU,KAAK;QAAEtB,aAAa,EAAEuB,MAAM,CAACE;MAAQ,CAAC;IAEpD,KAAKjB,WAAW,CAACK,mBAAmB;MAClC,OAAO;QAAE,GAAGS,KAAK;QAAErB,eAAe,EAAEsB,MAAM,CAACE;MAAQ,CAAC;IAEtD,KAAKjB,WAAW,CAACM,kBAAkB;MACjC,OAAO;QACL,GAAGQ,KAAK;QACRpB,cAAc,EAAE,CAACqB,MAAM,CAACE,OAAO,EAAE,GAAGH,KAAK,CAACpB,cAAc;MAC1D,CAAC;IAEH,KAAKM,WAAW,CAACO,mBAAmB;MAClC,OAAO;QAAE,GAAGO,KAAK;QAAEpB,cAAc,EAAEqB,MAAM,CAACE;MAAQ,CAAC;IAErD,KAAKjB,WAAW,CAACQ,wBAAwB;MACvC,OAAO;QAAE,GAAGM,KAAK;QAAEnB,mBAAmB,EAAEoB,MAAM,CAACE;MAAQ,CAAC;IAE1D,KAAKjB,WAAW,CAACS,WAAW;MAC1B,OAAO;QACL,GAAGK,KAAK;QACRlB,OAAO,EAAE;UAAE,GAAGkB,KAAK,CAAClB,OAAO;UAAE,CAACmB,MAAM,CAACE,OAAO,CAACE,GAAG,GAAGJ,MAAM,CAACE,OAAO,CAACG;QAAM;MAC1E,CAAC;IAEH,KAAKpB,WAAW,CAACU,SAAS;MACxB,OAAO;QACL,GAAGI,KAAK;QACRf,MAAM,EAAE;UAAE,GAAGe,KAAK,CAACf,MAAM;UAAE,CAACgB,MAAM,CAACE,OAAO,CAACE,GAAG,GAAGJ,MAAM,CAACE,OAAO,CAACG;QAAM;MACxE,CAAC;IAEH,KAAKpB,WAAW,CAACW,WAAW;MAC1B,OAAO;QACL,GAAGG,KAAK;QACRf,MAAM,EAAE;UAAE,GAAGe,KAAK,CAACf,MAAM;UAAE,CAACgB,MAAM,CAACE,OAAO,GAAG;QAAK;MACpD,CAAC;IAEH,KAAKjB,WAAW,CAACY,WAAW;MAC1B,OAAOxB,YAAY;IAErB;MACE,OAAO0B,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMO,aAAa,gBAAG3C,aAAa,CAAC,CAAC;;AAErC;AACA,OAAO,MAAM4C,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACV,KAAK,EAAEW,QAAQ,CAAC,GAAG7C,UAAU,CAACiC,aAAa,EAAEzB,YAAY,CAAC;;EAEjE;EACA,MAAMsC,UAAU,GAAGA,CAACP,GAAG,EAAEC,KAAK,KAAK;IACjCK,QAAQ,CAAC;MAAET,IAAI,EAAEhB,WAAW,CAACS,WAAW;MAAEQ,OAAO,EAAE;QAAEE,GAAG;QAAEC;MAAM;IAAE,CAAC,CAAC;EACtE,CAAC;EAED,MAAMO,QAAQ,GAAGA,CAACR,GAAG,EAAEC,KAAK,KAAK;IAC/BK,QAAQ,CAAC;MAAET,IAAI,EAAEhB,WAAW,CAACU,SAAS;MAAEO,OAAO,EAAE;QAAEE,GAAG;QAAEC;MAAM;IAAE,CAAC,CAAC;EACpE,CAAC;EAED,MAAMQ,UAAU,GAAIT,GAAG,IAAK;IAC1BM,QAAQ,CAAC;MAAET,IAAI,EAAEhB,WAAW,CAACW,WAAW;MAAEM,OAAO,EAAEE;IAAI,CAAC,CAAC;EAC3D,CAAC;;EAED;EACA,MAAMU,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrCH,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC;IAC3BE,UAAU,CAAC,SAAS,CAAC;IAErB,IAAI;MACF,MAAME,IAAI,GAAG,MAAM/C,SAAS,CAACgD,UAAU,CAAC,CAAC;MACzCN,QAAQ,CAAC;QAAET,IAAI,EAAEhB,WAAW,CAACI,kBAAkB;QAAEa,OAAO,EAAEa;MAAK,CAAC,CAAC;IACnE,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdL,QAAQ,CAAC,SAAS,EAAEK,KAAK,CAACC,OAAO,CAAC;IACpC,CAAC,SAAS;MACRP,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC;IAC9B;EACF,CAAC;EAED,MAAMQ,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvCR,UAAU,CAAC,iBAAiB,EAAE,IAAI,CAAC;IACnCE,UAAU,CAAC,iBAAiB,CAAC;IAE7B,IAAI;MACF,MAAME,IAAI,GAAG,MAAM/C,SAAS,CAACoD,kBAAkB,CAAC,CAAC;MACjDV,QAAQ,CAAC;QAAET,IAAI,EAAEhB,WAAW,CAACK,mBAAmB;QAAEY,OAAO,EAAEa,IAAI,CAACrC,eAAe,IAAI;MAAG,CAAC,CAAC;IAC1F,CAAC,CAAC,OAAOuC,KAAK,EAAE;MACdL,QAAQ,CAAC,iBAAiB,EAAEK,KAAK,CAACC,OAAO,CAAC;IAC5C,CAAC,SAAS;MACRP,UAAU,CAAC,iBAAiB,EAAE,KAAK,CAAC;IACtC;EACF,CAAC;EAED,MAAMU,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtCV,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC;IAC5BE,UAAU,CAAC,UAAU,CAAC;IAEtB,IAAI;MACF,MAAME,IAAI,GAAG,MAAM9C,WAAW,CAACqD,SAAS,CAAC,CAAC;MAC1CZ,QAAQ,CAAC;QAAET,IAAI,EAAEhB,WAAW,CAACO,mBAAmB;QAAEU,OAAO,EAAEa;MAAK,CAAC,CAAC;IACpE,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdL,QAAQ,CAAC,UAAU,EAAEK,KAAK,CAACC,OAAO,CAAC;IACrC,CAAC,SAAS;MACRP,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC;IAC/B;EACF,CAAC;EAED,MAAMY,mBAAmB,GAAG,MAAOC,gBAAgB,IAAK;IAAA,IAAAC,qBAAA;IACtD;IACAf,QAAQ,CAAC;MAAET,IAAI,EAAEhB,WAAW,CAACG,gBAAgB;MAAEc,OAAO,EAAEsB;IAAiB,CAAC,CAAC;;IAE3E;IACA,MAAME,OAAO,CAACC,GAAG,CAAC,CAChBb,kBAAkB,CAAC,CAAC,EACpBK,oBAAoB,CAAC,CAAC,CACvB,CAAC;;IAEF;IACA,KAAAM,qBAAA,GAAID,gBAAgB,CAACI,cAAc,cAAAH,qBAAA,eAA/BA,qBAAA,CAAiCI,WAAW,EAAE;MAChD,KAAK,MAAMC,UAAU,IAAIN,gBAAgB,CAACI,cAAc,CAACC,WAAW,EAAE;QACpE,MAAME,wBAAwB,CAACD,UAAU,CAAC;MAC5C;IACF;EACF,CAAC;EAED,MAAMC,wBAAwB,GAAG,MAAOD,UAAU,IAAK;IACrD,IAAI;MAAA,IAAAE,qBAAA;MACF,MAAMC,SAAS,GAAG,MAAMhE,WAAW,CAACiE,WAAW,CAAC;QAC9CC,KAAK,EAAE,QAAQL,UAAU,CAACM,IAAI,EAAE;QAChCC,WAAW,EAAE,wBAAwBP,UAAU,CAACM,IAAI,MAAMN,UAAU,CAACQ,MAAM,gBAAgBR,UAAU,CAACS,SAAS,EAAE;QACjHC,UAAU,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC;QACpEC,gBAAgB,EAAE,EAAE;QACpBC,UAAU,EAAE,CAAAb,qBAAA,GAAAF,UAAU,CAACS,SAAS,cAAAP,qBAAA,eAApBA,qBAAA,CAAsBc,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG;MAChF,CAAC,CAAC;MAEFrC,QAAQ,CAAC;QAAET,IAAI,EAAEhB,WAAW,CAACM,kBAAkB;QAAEW,OAAO,EAAE+B;MAAU,CAAC,CAAC;IACxE,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACd+B,OAAO,CAAC/B,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF,CAAC;EAED,MAAMgC,KAAK,GAAIC,QAAQ,IAAK;IAC1BxC,QAAQ,CAAC;MAAET,IAAI,EAAEhB,WAAW,CAACC,QAAQ;MAAEgB,OAAO,EAAEgD;IAAS,CAAC,CAAC;IAC3DxC,QAAQ,CAAC;MAAET,IAAI,EAAEhB,WAAW,CAACE,iBAAiB;MAAEe,OAAO,EAAE;IAAK,CAAC,CAAC;;IAEhE;IACA,MAAMiD,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAClD,IAAIF,KAAK,EAAE;MACTpF,UAAU,CAACuF,QAAQ,CAACH,KAAK,CAAC;IAC5B;;IAEA;IACArC,kBAAkB,CAAC,CAAC;IACpBK,oBAAoB,CAAC,CAAC;IACtBE,mBAAmB,CAAC,CAAC;EACvB,CAAC;EAED,MAAMkC,MAAM,GAAGA,CAAA,KAAM;IACnBH,YAAY,CAACI,UAAU,CAAC,cAAc,CAAC;IACvCJ,YAAY,CAACI,UAAU,CAAC,cAAc,CAAC;IACvCzF,UAAU,CAAC0F,UAAU,CAAC,CAAC;IACvB/C,QAAQ,CAAC;MAAET,IAAI,EAAEhB,WAAW,CAACY;IAAY,CAAC,CAAC;EAC7C,CAAC;;EAED;EACA/B,SAAS,CAAC,MAAM;IACd,MAAMqF,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAClD,MAAMK,WAAW,GAAGN,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAExD,IAAIF,KAAK,IAAIO,WAAW,EAAE;MACxB,IAAI;QACF,MAAMpF,IAAI,GAAGqF,IAAI,CAACC,KAAK,CAACF,WAAW,CAAC;QACpC3F,UAAU,CAACuF,QAAQ,CAACH,KAAK,CAAC;QAC1BzC,QAAQ,CAAC;UAAET,IAAI,EAAEhB,WAAW,CAACC,QAAQ;UAAEgB,OAAO,EAAE5B;QAAK,CAAC,CAAC;QACvDoC,QAAQ,CAAC;UAAET,IAAI,EAAEhB,WAAW,CAACE,iBAAiB;UAAEe,OAAO,EAAE;QAAK,CAAC,CAAC;;QAEhE;QACAY,kBAAkB,CAAC,CAAC;QACpBK,oBAAoB,CAAC,CAAC;QACtBE,mBAAmB,CAAC,CAAC;MACvB,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACd+B,OAAO,CAAC/B,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDsC,MAAM,CAAC,CAAC;MACV;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMlD,KAAK,GAAG;IACZ;IACA,GAAGN,KAAK;IAER;IACAkD,KAAK;IACLM,MAAM;IACNhC,mBAAmB;IACnBT,kBAAkB;IAClBK,oBAAoB;IACpBE,mBAAmB;IACnBU,wBAAwB;IACxBpB,UAAU;IACVC,QAAQ;IACRC,UAAU;IAEV;IACAH;EACF,CAAC;EAED,oBACEtC,OAAA,CAACkC,aAAa,CAACuD,QAAQ;IAACxD,KAAK,EAAEA,KAAM;IAAAG,QAAA,EAClCA;EAAQ;IAAAsD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;;AAED;AAAAxD,EAAA,CAtKaF,cAAc;AAAA2D,EAAA,GAAd3D,cAAc;AAuK3B,OAAO,MAAM4D,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAGzG,UAAU,CAAC0C,aAAa,CAAC;EACzC,IAAI,CAAC+D,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAQtB,eAAe7D,aAAa;AAAC,IAAA4D,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}